.. rst-class:: slide-green

==========================================================
Djangoのアプリはどういう単位で作るべきか？
==========================================================

| tell-k
| DjangoCongress JP 2022 (2022.11.12)


おまえ誰よ？
=====================================

.. image:: _static/img/tell-k_300x300.png

* tell-k
* BeProud.inc
* 情弱プログラマー
* https://twitter.com/tell_k
* **https://tell-k.github.io/djangocongressjp2022/**

BeProudの紹介
========================================

* BeProud - Pythonメインの受託開発、研修

 * 私は主にTRACERYを開発しています


.. image:: _static/img/beproud.png

個人でお手伝い

* Content Analytics - ユーザー体験分析ツール


目的/動機
=====================================

* Djangoの入門した時にアプリという概念に戸惑った
* 何年もDjangoで開発して失敗しつつも、プラクティス的なものが溜まってきました
* ただ、チームとかでは共有したりしたけど、まとめたりはしてなかった
* 世の中のプラクティスを調べながら、プラクティスをまとめたかったという欲求がありました。


対象
=====================================

* 他の言語のMVCフレームワークを触って、これから Django を始める人
* Django 完全に理解した人

  * `エンジニアの言う「完全に理解した」「なにもわからない」「チョットデキル」って本当はこういう意味？ <https://togetter.com/li/1268851>`_



今日話さないこと
=====================================

* Djangoプロジェクト全体のレイアウトの話
* Djangoの便利なライブラリの紹介＆使い方
* アプリの中をどう実装するか

  * ビジネスロジックはどこに書くか
  * アプリ共通のモジュール名はどうするか

基本的に **Djangoアプリどう作るか、分けるか** という話だけをします

対象とするプロジェクトの規模
=====================================

* プロジェクトの規模によって適用できる話と適用できない話がありそう
* 人数も少なく、機能もすくないアプリであれば過剰になるケース
* 逆に、規模が大きければ不十分であるケース

体感的に適用できそうな規模は以下のようなイメージです

* 同時に開発する人数が2〜10人くらい
* 数ヶ月〜数年間、保守をしながら継続的に機能追加・改修がある


Q1. 開発チームの規模(人数)はどれくらいですか？
===============================================

* 事前にアンケートを取りました。20人くらい回答がありました。ありがとうございます。
* 5人以下で開発してるチームが **90%** でした

.. image:: _static/img/graph_Q1.png


Q2. 開発チームのあなたの役割は？
==========================================

* プロジェクトリーダー **35%**
* 開発メンバー **50%**

他は

* アドバイザー
* PL、スクラムマスター、開発
* 個人で開発
* Full-stack Developer



Djangoで最初に困った話
=====================================

* それまでの私の仕事上の経験はPHPやPerlがメインでした
* 当時はMVCフレームワークが乱立

  * Mojavi
  * Ethna
  * Maple
  * CakePHP
  * Symfony
  * Zend_Framework
  * Sledge


だいたいこんな感じのレイアウト
=====================================

- **ファイルの種別や役割ごとに** コードがまとまっている

.. code-block:: text

 project
   ├── controllers
   │   ├── FugaContorller
   │   └── HogeContorller
   ├── models
   │   ├── Hoge
   │   └── User
   └── views
       ├── hoge_detail.html
       └── hoge_list.html


Django触り始めた時
=============================

- pollsアプリ？ 新しい機能作る時どうすればいいの？
- INSTALLED_APPS? 単なるPythonパッケージではないってこと？？？
- この実装は既存のアプリに書くのか、新しいアプリにするのか？？？
- **わからない。。。**


.. image:: _static/img/illust_komari.png


Djangoのアプリとは？
========================

 Django アプリケーション は単なる Python パッケージで、
 Django プロジェクトで使うことのみを意図したものです。
 アプリは一般的な Django の慣例に則っているでしょう。
 例えば models, tests, urls, views のサブモジュールがあることなどです。

 via https://docs.djangoproject.com/ja/4.1/intro/reusable-apps/

Djangoのアプリとは？
========================

 Django apps are small libraries designed to represent a single aspect of a project. A Django project is made up of many Django apps.
 Some of those apps are internal to the project and will never be reused; others are third-party Django packages.

 Djangoアプリは、プロジェクトの1つの側面を表現するために設計された小さなライブラリです。
 Djangoのプロジェクトは、多くの Djangoアプリで構成されています。
 それらのアプリの中には、**プロジェクト内部のもので決して再利用されることのないもの** もあれば、
 サードパーティの Django パッケージのものもあります。

 via 4 Fundamentals of Django App Design | Two Scoops of Django 3.x


Djangoのアプリとは？
========================

.. image:: _static/img/django-apps-image-two-scoops-django.png
   :width: 70%

via 4 Fundamentals of Django App Design | Two Scoops of Django 3.x

Djangoのアプリとは？
========================

* アプリの概念はなんとく理解はできました。
* プロジェクトの1つの側面 = 機能 と置き換えても差し支えないように感じます。

ではDjangoのアプリを作る、分ける基準は?
=========================================

* この基準や方針を解説してる書籍/サイトはあまり多くありません。
* 想像するに入門書に書くには、やや抽象的な話で、絶対的な正解もないので盛り込みにくいのかもしれません。
* ただ私のように他言語やMVCに触ったことがある人は、割と早めにぶつかる部分かと思います。

----

  It's not uncommon for new Django developers to become understandably confused by Django’s usage of the word “app”.

  新しいDjango開発者が、 "app"という単語の使い方に戸惑うことはよくあることです。

  via 4 Fundamentals of Django App Design | Two Scoops of Django 3.x

Q3. アプリを作る、分ける時の方針や、ガイドラインはチームにありますか？
==============================================================================

* **90%** がないと回答しています
* 方針がない = そもそもアプリを分けない可能性もある

.. image:: _static/img/graph_Q3.png


アプリは分けないとダメなのか？
=============================================

* 一つの大きなアプリの中で全てを実装すれば良いのではないのか？
* Djangoアプリを分けずに、やってうまく行っているプロジェクトもある
* アプリを分けるか分ないかはユーザーに委ねられてるので **一概に悪いとはいえない**
* ただアプリという概念を生かした開発はできなくなるので、Djangoの思想からは外れそう

一つの大きなアプリの問題点
============================================

  While common for small Django projects, larger projects typically don’t follow this pattern.

  There are positives to this approach. Specifically, migrations are easier and table names follow a simplified pattern. It has to be said that other frameworks such as Rails embrace this technique and are quite successful.

  However, while Rails and other tools are designed to follow this pattern, Django isn't optimized for this design.

  via 4.5.2 The Large Single App Project | Two Scoops of Django 3.x

一つの大きなアプリの問題点
============================================

  小さな Django プロジェクトではよくあることですが、大きなプロジェクトでは一般的にこのパターンに従いません。

  このアプローチには利点があります。具体的には、移行がより簡単になり、テーブル名は単純化されたパターンに従います。Rails のような他のフレームワークもこの手法を取り入れ、かなり成功していると言わざるを得ません。

  しかし、Rails や他のツールはこのパターンに従うように設計されていますが **Django はこの設計のために最適化されていません**

  via 4.5.2 The Large Single App Project | Two Scoops of Django 3.x

Django的な思考
============================================

* Djangoの開発者である James Bennett 氏 は 2008年の DjangoCon で以下のように表現しています。

  * `DjangoCon 2008: Reusable Apps <https://www.youtube.com/watch?v=A-S0tqpPga4>`_

* 他のフレームワークはモノリス的な思考をする

  * サイト全体を "アプリ" と捉える
  * 再利用については後から考える
  * "メイン" のアプリにフックするプラグインを開発する傾向がある
  * もしくはミドルウェア的な仕組みを多用する

Django的な思考
============================================

* Django的には以下のような思考をする

  * アプリ == ちょっとした機能
  * サイト == 幾つかのアプリの集まり
  * 新しいアプリを自由に派生させて作る傾向がある


一つのアプリでやっている例
============================================

* https://github.com/getsentry/sentry

  * エラートラッキングのSentry
  * sentryという巨大のアプリの中で様々なモデル、機能が存在する

* https://www.jamesbeith.co.uk/blog/how-to-structure-django-projects/

  * アプリは使わずに、独自にデータ層やドメイン層などにディレクトリを切って開発
  * Two Scope Django で否定的に紹介されていた



アプリをどう作るべきか
=========================================

* アプリを機能単位で作るといっても、どう作るべきなのかまだ曖昧なきがします
* 機能といっても大小があり、ある機能の中に別の機能が包含されているケースもある
* James Bennett 氏 は **UNIX哲学の言葉** を引用して次のように説明しています


"Do one thing, and do it well"
=========================================


"ひとつのことをうまくやれ"
=========================================


一つのことにフォーカスしてアプリを作る
=========================================

* 短い言葉で説明できる状態をアプリ(機能)として作る
* ある機能は一つのタスクにフォーカスしたものであるべき。
* 短い言葉で説明できない時は、アプリを分けることを検討できると良い

Two Scoops of Django 3.x の例
=========================================

* "Two Scoops" というアイスクリームショップのサイトを作る時にどういう機能があるだろうか。

  * flavor アプリ ... アイスクリームのフレーバーを追跡し、ウェブサイトに掲載する
  * blog アプリ ... お店の公ブログを管理
  * event アプリ ... お店が開催するイベントの管理
  * shop アプリ ... メールでアイスクリームを注文し販売できる
  * tickets アプリ...  アイスクリーム食べ放題チケットを販売できる

よくフォーカスできている例
=========================================

* ユーザーのストレージとそれらの認証を扱う
* コンテンツに "del.icio.us" 風にタグを付けられるようにし、タグによる問い合わせもできるようにする

via `DjangoCon 2008: Reusable Apps <https://www.youtube.com/watch?v=A-S0tqpPga4>`_

フォーカスできていない例
=========================================

* ブログのエントリ、それを投稿するユーザ、その認証、タグ付けとカテゴリ分け、静的コンテンツのためのいくつかのフラットページの扱いそして...

via `DjangoCon 2008: Reusable Apps <https://www.youtube.com/watch?v=A-S0tqpPga4>`_

直交性(Orthogonality) があるか考える
=======================================

* アプリを分けるかどうかを考えた時に、実装しようとしている機能が他のアプリと直交しているかどうか
* 直行性とは **何かを変えた時に他に影響を与えない** ということです。
* 例) ユーザー情報の更新フローの変更があっても、ユーザー登録の一連のフローには影響がないので、別のアプリにできそう。

とはいえなかなか難しい
=========================================

* 実際問題は私は ユーザーに関わる機能みたいなものはaccountアプリに放り込んでしまって、若干ファットになりがちアプリも作ったりしています(自戒)
* ユーザー登録、ログイン、ユーザープロフィールの登録、更新 etc

アプリを複数作るのを躊躇しない
=========================================

* アプリにひとつの事にフォーカスさせるということは、必然的にアプリが複数生まれる
* なので小さなアプリを複数作っていく事に躊躇しない方が良いです。
* 躊躇していると、一部のアプリが、ファットになりがちなので、迷ったらアプリを切る方が良い。


アプリを複数作るのを躊躇しない
=========================================

* Don't be Afraid Multiple Apps.

  * via `DjangoCon 2008: Reusable Apps <https://www.youtube.com/watch?v=A-S0tqpPga4>`_

* **When in Doubt, Keep Apps Small**

  * **迷ったらアプリを小さくしよう**
  * 最初から完璧を目指さずに、必要になったらリライトしたり、アプリを分割すれば良い
  * そのような場合も、大きなアプリになってるより小さいアプリになって方がやりやすい
  * via 4 Fundamentals of Django App Design | Two Scoops of Django 3.x


小さいアプリを複数作ればそれでいいのか？
=========================================

* **いいえ** せっかく複数のアプリに分割しても、それが密結合にならないしましょう。
* 密結合や、相互依存の関係になると、修正や追加のコストが想定外に膨らむケースにぶち当たります。
* アプリ同士の関係を極力、 **疎結合** になるように保ちましょう。
* 疎結合はDjangoの哲学においてとても重要な要素です。

疎結合(Loose Copling)
=========================================

  Djangoスタックの基本的な目標は、疎結合と高い凝集度を実現することです。フレームワークの各レイヤーは絶対に必要でない限り、相手をお互いに「知る」べきではありません。

  例えば、テンプレートシステムはWebリクエストについて何も知らず、データベース層はデータ表示について何も知らず、ビューシステムはプログラマがどのテンプレートシステムを使っているかを気にしません。

  Django は利便性のためにフルスタックとなってはいますが、スタックのどのコンポーネントも、可能な限り独立させてあります。

  via https://docs.djangoproject.com/ja/4.1/misc/design-philosophies/#loose-coupling

密結合の問題点
=========================================

* アプリ同士が無秩序に相互に依存していると様々な問題点がでてきます。

  * 例えばPythonのコード上では **循環参照エラー** 出たり。
  * アプリを変更したら、想定外のアプリまで修正しなければならなかったり
  * アプリを削除したら、他のアプリが壊れたり...


循環参照エラー
=========================================

.. image:: _static/img/circular_import_1.png

回避するために、メソッドの中でインポートしてしまう

.. image:: _static/img/circular_import_2.png


アプリが相互依存していると壊れやすい
==========================================

.. image:: _static/img/circular_apps.png
   :width: 60%

via https://seddonym.me/2018/05/04/django-signals/#project-dependency-flow


アプリ間の依存関係を少なくするためにどうするべきか
====================================================

* 依存を単方向に限定して、**依存関係を整理する**

.. image:: _static/img/encapsulated_apps.png
   :width: 60%

via https://seddonym.me/2018/05/04/django-signals/#project-dependency-flow


チームで依存関係のフローを意識する
=====================================

* 図に起こしたりして共有すると説明しやすい

.. image:: _static/img/real_dependecy_flow.png
   :width: 80%


相互に依存しないためにはどうすればいいか？
===============================================

* (やっと本題感)
* 依存しても良いアプリを作る
* Djangoの仕組みを使う

  * シグナルを使う
  * ミドルウェアを使う

* アプリ構造とURL構造を一致させない


依存しても良いアプリに分ける
===========================================


.. image:: _static/img/sougo_depend_1.png


依存しても良いアプリに分ける
===========================================

.. image:: _static/img/sougo_depend_2.png


Djangoの仕組みを使う
===========================================

* シグナルを使って依存関係を単方向にする
* 例えば監査ログようなアプリを考える
* 監査ログとは？

  * ユーザーが操作したアクションと、その時の対象の状態を記録する
  * AWS の CloudTrail とかをイメージするとわかりやすい

他のアプリと相互依存してまうケース
===============================================

.. image:: _static/img/auditlog_model.png


他のアプリと相互依存してまうケース
===============================================

* 監査ログを保存する時は、**auditlogアプリの関数** をインポートして各アプリ側に実装を書く

.. image:: _static/img/auditlog_logger.png


他のアプリと相互依存してまうケース
===============================================


.. image:: _static/img/auditlog_graph_1.png
   :width: 70%

(GenericForeignKeyを使うことを依存と表現するべきではないかもしれない)


シグナルを使い依存関係を単方向にする
======================================

.. image:: _static/img/auditlog_signal.png


シグナルを使い依存関係を単方向にする
======================================

.. image:: _static/img/auditlog_signal_graph.png


ミドルウェアを使う
=======================================

* 監査ログ取得をミドルウェアにして、他のアプリに依存させない


.. image:: _static/img/auditlog_middleware.png
   :width: 70%


ミドルウェアを使う
=======================================


.. image:: _static/img/auditlog_middleware_graph.png


アプリとURL構造を一致させない
=======================================

* 特に restframwork のようなAPIサーバーを作る時にありがち。
* URL構造に引っ張られて、アプリに無駄な依存が発生してしまう。
* 下記の例の場合、userアプリはどんどんコードが増え、依存が増えていく

.. image:: _static/img/url_depend_1.png


アプリとURL構造を一致させない
=======================================

* そのリソースを持つアプリで実装する方が依存が少なくなる

.. image:: _static/img/url_depend_2.png


それでも循環インポートはさける
=======================================

* 何かしらの強い事情で、他のアプリのモデルが欲しい
* 依存が増えてしまうが、それでもモデルが欲しい
* **Pythonコードでのimportはしない**
* Djangoの仕組みを利用する方が **いくらかマシ**

Djangoの仕組みでモデルを取得する
=======================================

頻繁に必要になるであろう、**AUTH_USER** のモデル get_user_modelで取れる

.. code-block:: text

 from django.contrib.auth import get_user_model
 User = get_user_model()

それ以外のモデルも、django.apps.apps.get_model() 取得できる

.. code-block:: text

  from django.apps import apps
  Blog = apps.get_model("blog.Blog")


オープン・クローズドの原則
=======================================

* アプリを疎結合にし、依存関係を単方向に整理すると機能が追加しやすく、影響範囲も限定的になるので修正しやすくなります。
* これは `SOLID <https://ja.wikipedia.org/wiki/SOLID>`_ の オープン・クローズドの原則をDjangoアプリでやっているイメージです。
* **「拡張に対して開いて、修正に対して閉じている」**

オープン・クローズドの原則
=======================================

.. image:: _static/img/open_closed_apps.png
   :width: 70%


まとめ1
===============================

* アプリは機能単位で作りましょう
 * アプリはひとつのタスクにフォーカスしましょう
 * アプリ間が直交になるか考えてみましょう
* 迷ったらアプリを小さく作りましょう
* アプリを疎結合にしましょう
 * 循環インポートを避けましょう
 * 依存関係が単方向になるよう整理しましょう

まとめ2
===============================

* 疎結合を実現するためには
 * 依存しても良いアプリを作りましょう
 * DJangoの仕組みを使いましょう (シグナル、ミドルウェア, モデル取得)
 * アプリとURL構造を一致しないようにしましょう
* オープンクローズドの原則が満たせるようなアプリ構成を目指しましょう


Q5. Djangoの開発で参考にしている書籍やWebサイトは？
=======================================================

* akiyokoさんの本(書籍)

  * 現場で使える Djangoシリーズ

* Two Scoops of Django 3.x (書籍)
* 実践Django(書籍)
* 公式ドキュメント (サイト)
* Stack Overflow (サイト)
* くろのて (サイト)
* DRFの公式ドキュメント(サイト)
* 過去のDjangoCongressの資料 (サイト)
* thinkAmiさんのブログ(サイト)
* Narito Blog(サイト)

Q6.  Djangoを最初に学び始めた時にどんなことに困った?
=========================================================

* 設定ファイルの分け方
* アプリの命名規則
* アプリを切る粒度
* フォームライブラリが移行時期で覚えるの大変
* フォームセット
* デプロイ方法
* 静的ファイルの取り扱い
* テスト方法
* モデル設計
* ブラックボックスになってるのが不安

Q6.  Djangoを最初に学び始めた時にどんなことに困った?
=========================================================

* ドキュメントに載ってない、ユーザー権限周り
* ビジネスロジックががっつりViewに書かれていた
* ORMの制約
* どっから初めていいのかわからない
* 日本語の情報がすくない
* クラスベースビューと関数ベースビューの違い
* クラスベースビューのカスタマイズ方法

Q6.  Djangoを最初に学び始めた時にどんなことに困った?
=========================================================

* 情報が少ない
* ユーティリティの置き場所
* マイグレーションエラーの解消方法
* アプリとは？
* ディレクトリ構成
* モデルのマネージャーを知らずに苦労した
* DjangoのAdminが改造しにくい


参考
===============================

* Webページ や 書籍 の著者の皆さん 本当に ありがとうございます。m(_ _)m
* https://docs.djangoproject.com/ja/4.1/intro/reusable-apps/
* https://django-best-practice-ja.readthedocs.io/ja/latest/deployment/bootstrap.html
* https://webcache.googleusercontent.com/search?q=cache:rhIpalvIOCcJ:https://groups.google.com/g/django-ja/c/Lmk_z7vvpqs&cd=1&hl=ja&ct=clnk&gl=jp
* https://akirachiku.com/post/2014-04-01-road-to-django-best-practice/
* https://shuji-w6e.hatenadiary.org/entry/20080731/1217477232


参考
===============================
* https://teratail.com/questions/217875
* https://seddonym.me/2018/05/04/django-signals/#project-dependency-flow
* https://slides.com/davidseddon/deck/#/
* https://thara.dev/posts/rethink-django-project-structure/
* https://hiroronn.hatenablog.jp/entry/20181216/1544950291
* https://www.dabapps.com/blog/django-models-and-encapsulation/
* https://github.com/wsvincent/awesome-django#open-source-projects
* https://docs.google.com/presentation/d/1yapK1hYt8f64ztLCc7yFpCI4RG1vTMLhqwZ6cUBZIvI/edit#slide=id.g1db50041e3_0_145


ご静聴ありがとうございました
==================================
